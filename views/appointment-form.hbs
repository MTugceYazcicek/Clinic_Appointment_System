<div class="container mt-5">
    <h2>{{doctor.name}} - Randevu Al</h2>
    <p>Uzmanlık: {{doctor.specialty}}</p>
    
    <form id="appointmentForm" class="mt-4">
        <input type="hidden" id="doctorId" value="{{doctor.id}}">
        
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="appointmentDate">Randevu Tarihi ve Saati:</label>
                   <input type="datetime-local" 
       id="appointmentDate" 
       name="date" 
       class="form-control"
       value="{{tomorrowAtEight}}"
       min="{{minDate}}T08:00" 
       max="{{maxDate}}T18:00"
       step="1800"> <!-- 30 dakikalık aralıklar -->
                </div>
            </div>
        </div>
        
        <div class="form-group">
            <label for="description">Açıklama (Opsiyonel):</label>
            <textarea id="description" class="form-control" rows="3"></textarea>
        </div>
        
        <button type="submit" class="btn btn-primary mt-3" id="submitBtn">Randevu Al</button>
        <div id="loadingSpinner" class="spinner-border text-primary mt-3 d-none" role="status">
            <span class="sr-only">Yükleniyor...</span>
        </div>
    </form>
    
    
    
    <div id="errorAlert" class="alert alert-danger mt-3 d-none" role="alert"></div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('appointmentForm');
    const submitBtn = document.getElementById('submitBtn');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const successAlert = document.getElementById('successAlert');
    const errorAlert = document.getElementById('errorAlert');

    // Form gönderimi
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const doctorId = document.getElementById('doctorId').value;
        const appointmentDateTime = document.getElementById('appointmentDate').value;
        const description = document.getElementById('description').value;

        // Validasyonlar
        if (!appointmentDateTime) {
            showError('Lütfen tarih ve saat seçiniz');
            return;
        }

        try {
            const appointmentDate = new Date(appointmentDateTime);
            
            if (isNaN(appointmentDate.getTime())) {
                showError('Geçersiz tarih veya saat formatı');
                return;
            }

            // Geçmiş tarih kontrolü
            const now = new Date();
            if (appointmentDate < now) {
                showError('Geçmiş bir tarih için randevu alamazsınız');
                return;
            }

            // Çalışma saatleri kontrolü (08:00 - 18:00)
            const hours = appointmentDate.getHours();
            if (hours < 8 || hours >= 18) {
                showError('Randevu saatleri 08:00 ile 18:00 arasındadır');
                return;
            }

            submitBtn.disabled = true;
            loadingSpinner.classList.remove('d-none');
            errorAlert.classList.add('d-none');
            
            const response = await fetch('/appointments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    doctorId: Number(doctorId),
                    appointmentDateTime: appointmentDate.toISOString(),
                    description
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Randevu oluşturulamadı');
            }
            
            const result = await response.json();
            
            successAlert.classList.remove('d-none');
            setTimeout(() => {
                window.location.href = '/appointments';
            }, 2000);
            
        } catch (error) {
            console.error('Hata:', error);
            showError(error.message || 'Randevu oluşturulurken bir hata oluştu');
        } finally {
            submitBtn.disabled = false;
            loadingSpinner.classList.add('d-none');
        }
    });
    
    function showError(message) {
        errorAlert.textContent = message;
        errorAlert.classList.remove('d-none');
        errorAlert.scrollIntoView({ behavior: 'smooth' });
    }
});
</script>

<style>
.fa-spinner {
    margin-right: 5px;
}
</style>